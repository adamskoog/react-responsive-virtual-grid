{"version":3,"sources":["../../src/hooks/useWindowSize.js","../../src/index.js","../../src/hooks/useScrollPosition.js","App.js","index.js"],"names":["cell","total","render","viewportRowOffset","_viewportRowOffset","useMemo","Math","useState","container","setContainer","windowScrollPosition","debounceTime","isClient","window","debounce","nanobounce","scrollPosition","setScrollPosition","useEffect","getPosition","useScrollPosition","viewport","width","height","undefined","windowSize","setWindowSize","getSize","useWindowSize","display","columns","rows","layout","firstVisibileRowIndex","children","index","max","row","column","key","style","position","transform","containerStyle","ref","Item","backgroundColor","src","alt","objectFit","App","background","margin","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5b73cbd3.chunk.js","sourcesContent":["import { useMemo, useEffect, useState } from 'react'\nimport nanobounce from 'nanobounce'\n\nconst useWindowSize = (debounceTime = 100) => {\n  const isClient = typeof window === 'object'\n  const debounce = useMemo(() => nanobounce(debounceTime), [debounceTime])\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    }\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize)\n\n  useEffect(() => {\n    if (!isClient) {\n      return false\n    }\n\n    function handleResize() {\n      if (getSize() === windowSize) {\n        return\n      }\n\n      debounce(() => setWindowSize(getSize()))\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [debounce])\n\n  return windowSize\n}\n\nexport default useWindowSize\n","import React, { useMemo, useState } from 'react'\nimport useWindowSize from './hooks/useWindowSize'\nimport useScrollPosition from './hooks/useScrollPosition'\n\nexport const VirtualGrid = ({\n  cell,\n  total,\n  render,\n  viewportRowOffset: _viewportRowOffset = 4,\n  ...props\n}) => {\n  const viewportRowOffset = useMemo(\n    () => Math.max(2, Math.round(_viewportRowOffset / 2) * 2),\n    [_viewportRowOffset]\n  )\n\n  const [container, setContainer] = useState({})\n  const windowScrollPosition = useScrollPosition()\n  const scrollPosition = useMemo(\n    () => Math.max(0, windowScrollPosition - container.offsetTop || 0),\n    [windowScrollPosition, container]\n  )\n\n  const viewport = useWindowSize()\n  const display = useMemo(() => {\n    const columns = {}\n    const rows = {}\n    const layout = {}\n\n    layout.width = container.clientWidth || viewport.width\n    columns.total = Math.floor(layout.width / cell.width)\n    rows.total = Math.ceil(total / columns.total)\n    layout.height = rows.total * cell.height\n    columns.height = layout.height\n    columns.width = Math.floor(layout.width / columns.total)\n    rows.height = cell.height\n    rows.width = layout.width\n\n    return {\n      columns,\n      rows,\n      layout,\n      viewport: {\n        columns: {\n          ...columns,\n          total: columns.total\n        },\n        rows: {\n          ...rows,\n          total: Math.ceil(viewport.height / rows.height) + viewportRowOffset\n        }\n      }\n    }\n  }, [cell.height, cell.width, viewportRowOffset, viewport, total, container])\n\n  const firstVisibileRowIndex = useMemo(\n    () =>\n      Math.max(\n        0,\n        Math.floor(scrollPosition / display.rows.height) - viewportRowOffset / 2\n      ),\n    [scrollPosition, display.rows.height, viewportRowOffset]\n  )\n\n  const children = useMemo(() => {\n    const children = []\n    let index = firstVisibileRowIndex * display.columns.total\n    const max = Math.min(\n      total,\n      index + display.viewport.rows.total * display.viewport.columns.total\n    )\n    let row, column\n\n    for (index; index < max; index++) {\n      row = Math.min(\n        display.rows.total,\n        Math.floor(index / display.columns.total)\n      )\n      column = index % display.columns.total\n      children.push(\n        render({\n          key: `${row}-${column}`,\n          index,\n          style: {\n            position: 'absolute',\n            height: display.rows.height,\n            width: display.columns.width,\n            transform: `translate3d(${column * display.columns.width}px, ${\n              row * display.rows.height\n            }px, 0px)`\n          }\n        })\n      )\n    }\n\n    return children\n  }, [\n    total,\n    display.rows.height,\n    display.rows.total,\n    display.columns.width,\n    display.columns.total,\n    display.viewport.rows.total,\n    firstVisibileRowIndex,\n    render\n  ])\n\n  const containerStyle = useMemo(\n    () => ({\n      position: 'relative',\n      height: `${display.layout.height}px`\n    }),\n    [display.layout.height, display.layout.width]\n  )\n\n  return (\n    <div ref={(el) => setContainer(el)} style={containerStyle}>\n      {children}\n    </div>\n  )\n}\n\nexport default VirtualGrid\n","import { useMemo, useEffect, useState } from 'react'\nimport nanobounce from 'nanobounce'\n\nconst useScrollPosition = (debounceTime = 16) => {\n  const isClient = typeof window === 'object'\n  const debounce = useMemo(() => nanobounce(debounceTime), [debounceTime])\n\n  function getPosition() {\n    return window.scrollY\n  }\n\n  const [scrollPosition, setScrollPosition] = useState(getPosition)\n\n  useEffect(() => {\n    if (!isClient) {\n      return false\n    }\n\n    function handleScroll() {\n      if (getPosition() === scrollPosition) {\n        return\n      }\n\n      debounce(() => setScrollPosition(getPosition()))\n    }\n\n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [debounce])\n\n  return scrollPosition\n}\n\nexport default useScrollPosition\n","import React from 'react'\nimport VirtualGrid from 'react-responsive-virtual-grid'\n\nconst Item = ({ style, key, index }) => (\n  <div style={{ backgroundColor: 'gainsboro', ...style }} key={key}>\n    <img\n      src={`https://picsum.photos/id/${index}/304/160`}\n      alt={`Pcisum placeholder #${index}`}\n      style={{ objectFit: 'cover' }}\n      width=\"100%\"\n      height=\"100%\"\n    />\n  </div>\n)\n\nconst App = ({ ...props }) => {\n  return (\n    <section>\n      <header style={{ height: '10em', background: 'tan' }}>\n        <h1>Header</h1>\n      </header>\n      <div style={{ margin: '2em' }}>\n        <h2>Anywhere, in any Container</h2>\n        <VirtualGrid\n          total={4000}\n          cell={{ height: 304, width: 160 }}\n          render={Item}\n          viewportRowOffset={10}\n        />\n      </div>\n      <footer style={{ height: '10em', background: 'thistle' }}>\n        <p>Footer</p>\n      </footer>\n    </section>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}